{"version":3,"sources":["redux/Cart/CartAction.tsx","Components/Product/ProductItem.tsx","data.tsx","pages/ProductPage.tsx","pages/ProductContainer.tsx","Components/Cart/CartItem.tsx","Components/Cart/CartItemContainer.tsx","pages/CartPage.tsx","redux/Cart/CartSelector.tsx","pages/CartContainer.tsx","App.tsx","redux/Product/ProductAction.tsx","reportWebVitals.ts","redux/Cart/CartReducer.tsx","redux/Product/ProductReducer.tsx","redux/rootReducer.tsx","redux/Store.tsx","index.tsx"],"names":["CartType","ProductItem","prop","className","onClick","addToCart","product","src","Image","Title","Price","DataProduct","Name","id","ProductPage","ProductProp","map","value","index","AddProductAction","type","ADD_PRODUCT","RemoveCartProductAction","REMOVE_PRODUCT","AddProductToCart","quantity","ProductToCart","itemIQuantity","connect","state","dispatch","CartItem","CartGroups","removeProductCart","title","cartproduct","RemoveProductToCart","CartPage","CartProp","useState","isOpen","setIsOpen","handleToggle","ItemInCart","a","ProductCart","push","item","reduce","sum","items","cart","bags","itemquantity","CartItemContainer","getProductToCart","createSelector","cartState","products","addProductCart","App","ProductType","CartContainer","ProductContainer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","intial","initial","rootReducer","combineReducers","productState","intials","action","PRODUCT_FETCHED","middleware","thunk","next","composedEnhancers","composeWithDevTools","createStore","applyMiddleware","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.777b7247.chunk.js","sourcesContent":["import { Dispatch } from 'redux';\r\nimport { Action } from 'redux'\r\nimport IProduct from '../../Models/IProduct';\r\nimport CartProduct from '../../Models/IQuantity'\r\nexport enum CartType {\r\n  ADD_PRODUCT = \" ADD\",\r\n  REMOVE_PRODUCT = \" REMOVE\"\r\n\r\n}\r\n\r\nexport class AddProductAction implements Action {\r\n  public readonly type: CartType = CartType.ADD_PRODUCT;\r\n  constructor(public product: CartProduct) { }\r\n}\r\n\r\nexport class RemoveCartProductAction implements Action {\r\n  public readonly type: CartType = CartType.REMOVE_PRODUCT;\r\n  constructor(public product: IProduct, public id: number) { }\r\n}\r\n\r\nexport const AddProductToCart = (product: IProduct, quantity: number) => {\r\n  const ProductToCart: CartProduct = {\r\n    ...product,\r\n    itemIQuantity: quantity,\r\n  };\r\n  \r\n  return new AddProductAction(ProductToCart);\r\n  \r\n}\r\n\r\nexport const RemoveProductToCart = (product: IProduct, id: number) => (dispatch: Dispatch) => {\r\n  dispatch(new RemoveCartProductAction(product, id));\r\n\r\n\r\n}\r\nexport type CartAction = AddProductAction | RemoveCartProductAction;","\r\nimport IProduct from \"../../Models/IProduct\";\r\nimport { AddProductToCart } from \"../../pages/ProductContainer\";\r\n\r\nimport \"./product.css\";\r\n\r\ninterface Props {\r\n    product: IProduct;\r\n    addToCart: AddProductToCart;\r\n    key: number;\r\n}\r\n\r\nconst ProductItem = (prop: Props) => {\r\n    {\r\n        return (\r\n            <div\r\n                className=\"product-item\"\r\n                onClick={() => prop.addToCart(prop.product, 1)} >\r\n                <div className=\"product-img\">\r\n                    <img src={prop.product.Image}></img>\r\n                </div>\r\n                <p className=\"product-title\">{prop.product.Title}</p>\r\n                <div className=\"product-price\">\r\n                    <div className=\"val\">\r\n                        <b>{prop.product.Price}</b>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"product-add-btn\">add cart</div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default  ProductItem ;\r\n","import IProduct from \"./Models/IProduct\";\r\n\r\nconst DataProduct: IProduct[] = [\r\n  {\r\n    \r\n    Name: \"Áo 1\",\r\n    id: 1,\r\n    Price: 120000,\r\n    Title: \"áo thun 10\",\r\n    Image: \"./h23.jpg\",\r\n  },\r\n  {\r\n    \r\n    Name: \"Áo 2\",\r\n    id: 11,\r\n    Price: 130000,\r\n    Title: \"áo thun 2\",\r\n    Image: \"/images/h12.jpg\",\r\n  },\r\n\r\n  {\r\n    \r\n    Name: \"Áo 3\",\r\n    id: 14,\r\n    Price: 110000,\r\n    Title: \"áo thun 3\",\r\n    Image: \"/images/h5.jpg\",\r\n  },\r\n  {\r\n    \r\n    Name: \"Áo 4\",\r\n    id: 51,\r\n    Price: 103000,\r\n    Title: \"áo thun 4\",\r\n    Image: \"/images/h23.jpg\",\r\n  },\r\n  {\r\n    \r\n    Name: \"Áo 5\",\r\n    id: 21,\r\n    Price: 114000,\r\n    Title: \"áo thun 5\",\r\n    Image: \"/images/h3.jpg\",\r\n  },\r\n\r\n  {\r\n    \r\n    Name: \"Áo 6\",\r\n    id: 31,\r\n    Price: 103200,\r\n    Title: \"áo thun 6\",\r\n    Image: \"/images/h2.jpg\",\r\n  },\r\n  {\r\n    \r\n    Name: \"Áo 7\",\r\n    id: 18,\r\n    Price: 190000,\r\n    Title: \"áo thun 7\",\r\n    Image: \"/images/h21.jpg\",\r\n  },\r\n];\r\nexport default DataProduct;\r\n","import React from 'react'\r\nimport ProductItem from '../Components/Product/ProductItem'\r\nimport { ProuductProp } from './ProductContainer'\r\nimport IProduct from '../Models/IProduct'\r\nimport DataProduct from '../data'\r\n import './productpage.css'\r\nimport src from '*.avif'\r\n \r\nconst ProductPage = (ProductProp: ProuductProp) => {\r\n\r\n    return (\r\n        \r\n        <>\r\n            <div className=\"product-page\">\r\n                <div className=\"container\">\r\n                    <header className=\"header\">Demo</header>\r\n                    {DataProduct.map((value: IProduct, index: number) => {\r\n                        return (\r\n                            <ProductItem\r\n                                product={value}\r\n                                key={index}\r\n                                addToCart={ProductProp.addToCart}\r\n                                \r\n                                 />\r\n                        );\r\n\r\n                    })}\r\n\r\n\r\n                </div>\r\n\r\n            </div>\r\n        </>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default ProductPage\r\n","import { type } from \"node:os\";\r\nimport React from \"react\";\r\nimport IProduct from \"../Models/IProduct\";\r\nimport { connect } from \"react-redux\";\r\nimport Product from \"../Components/Product/ProductItem\";\r\nimport ProductPage from \"./ProductPage\";\r\nimport { AddProductToCart } from \"../redux/Cart/CartAction\";\r\nimport { AppState } from \"../redux/rootReducer\";\r\n\r\n\r\nexport type AddProductToCart = (Product: IProduct, quantity: number) => void;\r\n\r\n\r\n\r\n\r\ninterface StateToProps {\r\n  product: IProduct[];\r\n}\r\ninterface DispatchToProps {\r\n  addToCart: AddProductToCart;\r\n  \r\n}\r\n\r\nconst mapStateToProps= (state:StateToProps)=>{\r\n  return {\r\n  ...state,\r\n    \r\n  }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch:any): DispatchToProps => ({\r\n  addToCart: (product: IProduct, quantity: number) => dispatch(AddProductToCart(product, quantity)),\r\n});\r\nexport type ProuductProp = StateToProps & DispatchToProps;\r\nexport default connect(mapStateToProps,mapDispatchToProps)(ProductPage);\r\n","\r\nimport \"./CartItem.css\";\r\nimport { CartItemProp } from \"./CartItemContainer\";\r\n\r\nconst CartItem = (CartGroups: CartItemProp) => {\r\n  return (\r\n    <div className=\"item\">\r\n      <div\r\n        className=\"remove-icon\"\r\n        onClick={() =>\r\n          CartGroups.removeProductCart(CartGroups.product, CartGroups.product.id)\r\n        }\r\n        title={CartGroups.product.Title}>\r\n\r\n      </div>\r\n      <div className=\"cart-img\">\r\n        <img src={CartGroups.product.Image}></img>\r\n      </div>\r\n\r\n      <div className=\"detail\">\r\n      \r\n        <p className=\"title\">{CartGroups.product.Title}</p>\r\n        <p className = \"price\">Price:{CartGroups.product.Price}</p>\r\n        <p className=\"cart-itemquantity\">Quantity: {CartGroups.product.itemIQuantity}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CartItem;\r\n","import IProduct from \"../../Models/IProduct\";\r\nimport CartProduct from \"../../Models/IQuantity\";\r\n\r\nimport { RemoveProductToCart } from '../../redux/Cart/CartAction'\r\nimport {connect} from 'react-redux'\r\nimport CartItem from \"./CartItem\";\r\ntype RemoveProductToCartProp = (product: CartProduct, id: number) => void;\r\n\r\ninterface DispatchProp {\r\n    removeProductCart: RemoveProductToCartProp;\r\n}\r\ninterface StateProp {\r\n    product: CartProduct;\r\n    id: number;\r\n}\r\nexport type CartItemProp = DispatchProp & StateProp\r\n\r\nconst mapDispatchToProps = (dispatch: any): DispatchProp => ({\r\n    removeProductCart:(cartproduct: CartProduct, id: number)=> dispatch(RemoveProductToCart(cartproduct, id)),\r\n})\r\n\r\nexport default connect (null,mapDispatchToProps)(CartItem)","import React, { useState } from \"react\";\r\nimport CartItemContainer from \"../Components/Cart/CartItemContainer\";\r\nimport CartProduct from \"../Models/IQuantity\";\r\nimport { CartProp } from \"../pages/CartContainer\";\r\nimport \"./CartPage.css\";\r\n\r\n\r\n\r\n\r\nconst CartPage = (CartProp: CartProp) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const handleToggle = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  const ItemInCart = [];\r\n  for (const a in CartProp.ProductCart) {\r\n    ItemInCart.push(CartProp.ProductCart[a]);\r\n  }\r\n  const item = ItemInCart.reduce((sum: number, items: CartProduct) => {\r\n    return sum + items.itemIQuantity;\r\n  }, 0);\r\n  const cart = isOpen ? \"cart-page\" : \"cart-page cart-page--cart-close \";\r\n  const bags = isOpen ? \"bags\" : \"bags bags--cart-close \";\r\n  const itemquantity = isOpen  ? \"item-quantity\"   : \"item-quantity item-quantity--cart-close\";\r\n\r\n  return (\r\n    <div className={cart}>\r\n      <div className=\"cart-close-button\" onClick={handleToggle}>\r\n        X\r\n      </div>\r\n      <div className=\"cart-content\">\r\n        <div className=\"cart-header\">\r\n          <div className={bags} onClick={handleToggle}>\r\n            <span className={itemquantity}>{item}</span>\r\n          </div>\r\n          <span className=\"header-title\">Cart</span>\r\n        </div>\r\n        <div className=\"cart-item\" >\r\n          {ItemInCart.map((value, index) => (\r\n            <CartItemContainer product={value} id={index} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CartPage;\r\n","import { createSelector } from \"reselect\";\r\n\r\nimport { AppState } from \"../rootReducer\";\r\nimport { CartState } from \"./CartReducer\";\r\n\r\nconst getCart = (state: AppState) => state.cartState;\r\n\r\n\r\nexport const getProductToCart = createSelector(\r\n  getCart,\r\n  (cart: CartState) => cart.products\r\n);\r\n","import { connect } from \"react-redux\";\r\nimport IDictionary from \"../Models/IDictionary\";\r\nimport IProduct from \"../Models/IProduct\";\r\nimport CartProduct from \"../Models/IQuantity\";\r\nimport { AddProductToCart } from \"../redux/Cart/CartAction\";\r\nimport { AppState } from \"../redux/rootReducer\";\r\nimport CartPage from '../pages/CartPage'\r\nimport { getProductToCart } from \"../redux/Cart/CartSelector\";\r\n\r\nexport type addProductCartDispatchProp = (product: IProduct, quantity: number) => void;\r\n\r\ninterface DisPatchProp {\r\n    addProductCart: addProductCartDispatchProp;\r\n}\r\ninterface StateProp {\r\n    ProductCart: IDictionary<CartProduct>\r\n}\r\n\r\nexport type CartProp = DisPatchProp & StateProp\r\n\r\nconst mapDispatchToProps = (dispatch: any): DisPatchProp => ({\r\n    addProductCart: (product: IProduct, quantity: number) => dispatch(AddProductToCart(product, quantity))\r\n});\r\n\r\nconst mapStateToProps = (state: AppState): StateProp => ({\r\n    ProductCart: getProductToCart(state)\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CartPage)\r\n","import React, { useEffect } from 'react';\r\n\r\nimport ProductPage from './pages/ProductPage'\r\nimport CartPage from './pages/CartPage'\r\nimport './App.css';\r\nimport Store from './redux/Store';\r\nimport { Provider } from 'react-redux';\r\nimport CartProduct from './Models/IQuantity';\r\nimport Product from './Components/Product/ProductItem';\r\nimport store from '../src/redux/Store'\r\nimport {AddProductAction } from './redux/Cart/CartAction'\r\nimport ProductContainer from './pages/ProductContainer';\r\nimport CartContainer from './pages/CartContainer';\r\n\r\nfunction App() {\r\n  \r\n\r\n\r\n  return (\r\n \r\n\r\n<div className=\"App\">\r\n        <CartContainer/>\r\n         <ProductContainer/>\r\n\r\n       \r\n       \r\n      \r\n \r\n    </div>\r\n    \r\n    \r\n   \r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { Action } from \"redux\";\r\nimport IProduct from '../../Models/IProduct'\r\n\r\nexport enum ProductType {\r\n    PRODUCT_FETCHED = \"[PRODUCT] fetched\",\r\n}\r\nexport class ProductFetchedAction implements Action {\r\n\r\n    public type: ProductType = ProductType.PRODUCT_FETCHED;\r\n    constructor(public products: IProduct[]) { }\r\n}\r\nexport type ProductAction = ProductFetchedAction;\r\n\r\n\r\n\r\n\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import Dictionary from \"../../Models/IDictionary\";\r\nimport CartProduct from \"../../Models/IQuantity\";\r\nimport {\r\n    CartAction,\r\n    CartType,\r\n    AddProductAction,\r\n    RemoveCartProductAction,\r\n} from \"./CartAction\";\r\n\r\nexport interface CartState {\r\n    products: Dictionary<CartProduct>;\r\n}\r\nconst intial: CartState = {\r\n    products: {},\r\n};\r\nexport function CartReducer(\r\n    intials: CartState = intial,\r\n    action: CartAction ): CartState {\r\n\r\n    switch (action.type) {\r\n        case CartType.ADD_PRODUCT: {\r\n            const product = (action as AddProductAction).product;\r\n\r\n            if (intials.products[product.id]) {\r\n                product.itemIQuantity += intials.products[product.id].itemIQuantity;\r\n            }\r\n            return {\r\n                products: {\r\n                    ...intials.products,\r\n                    [product.id]: product,\r\n                   \r\n                   \r\n                },\r\n            };\r\n        }\r\n\r\n        case CartType.REMOVE_PRODUCT: {\r\n            const id = (action as RemoveCartProductAction).id;\r\n            const products = { ...intials.products };\r\n            delete products[id];\r\n\r\n            return {\r\n                products: {\r\n                    ...products,\r\n                },\r\n            };\r\n        }\r\n\r\n        default:\r\n            return intials;\r\n    }\r\n}\r\n","import React from 'react'\r\nimport  Dictionary  from '../../Models/IDictionary';\r\nimport IProduct from '../../Models/IProduct';\r\nimport  CartProduct  from '../../Models/IQuantity';\r\nimport { ProductAction,ProductType } from './ProductAction';\r\n\r\nexport interface ProductState {\r\n  products: IProduct[];\r\n}\r\nconst initial: ProductState = {\r\n  products: [],\r\n};\r\nexport function productReducer (intials:ProductState=initial, action:ProductAction)\r\n{\r\n  switch (action.type) {\r\n\r\n    case ProductType.PRODUCT_FETCHED:\r\n\r\n      return {\r\n        ...intials,\r\n        products: action.products,\r\n      };\r\n\r\n    default:\r\n      return intials;\r\n  }\r\n}\r\n\r\n","import React from 'react'\r\nimport { combineReducers, Reducer } from \"redux\";\r\n import { CartReducer, CartState } from './Cart/CartReducer';\r\n\r\nimport { productReducer, ProductState } from './Product/ProductReducer';\r\n\r\nexport interface AppState{\r\n     cartState: CartState;\r\n     productState: ProductState;\r\n  \r\n}\r\n\r\nexport const rootReducer : Reducer<AppState>=combineReducers<AppState>({\r\n     productState:productReducer,\r\n     cartState: CartReducer\r\n}); ","\r\nimport {createStore,AnyAction,Dispatch,Middleware,applyMiddleware} from 'redux'\r\nimport { rootReducer } from './rootReducer'\r\nimport thunk from \"redux-thunk\"\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nconst simple=()=>(next:Dispatch<AnyAction>)=>(action:AnyAction)=>{\r\n    next({...action});\r\n}\r\n\r\nconst middleware: Middleware[]=[\r\n    thunk,\r\n    simple,\r\n];\r\n\r\nconst composedEnhancers=composeWithDevTools({\r\n  \r\n})\r\n\r\nexport default createStore(\r\n    rootReducer,\r\n    composedEnhancers( applyMiddleware(...middleware))\r\n    )\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from '../src/redux/Store'\nimport { Provider } from 'react-redux'\nReactDOM.render(\n  <Provider store={store}>\n\n\n         <App/>\n       \n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}